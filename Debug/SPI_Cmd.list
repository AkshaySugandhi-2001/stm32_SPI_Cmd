
SPI_Cmd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001d78  08001d78  00002d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e2c  08001e2c  00002e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e34  08001e34  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e34  08001e34  00002e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e38  08001e38  00002e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001e3c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001e98  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001e98  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e51  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000765  00000000  00000000  00004edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00005648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c0  00000000  00000000  000058b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000374e  00000000  00000000  00005a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029a4  00000000  00000000  000091c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bfec  00000000  00000000  0000bb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00017b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001108  00000000  00000000  00017b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  00018ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001d60 	.word	0x08001d60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001d60 	.word	0x08001d60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d161      	bne.n	8000386 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a33      	ldr	r2, [pc, #204]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ca:	4b33      	ldr	r3, [pc, #204]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a32      	ldr	r2, [pc, #200]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 80002d6:	e056      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a30      	ldr	r2, [pc, #192]	@ (800039c <GPIO_PeriClockControl+0xec>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	e04b      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a2b      	ldr	r2, [pc, #172]	@ (80003a0 <GPIO_PeriClockControl+0xf0>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b28      	ldr	r3, [pc, #160]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a27      	ldr	r2, [pc, #156]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000302:	e040      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a27      	ldr	r2, [pc, #156]	@ (80003a4 <GPIO_PeriClockControl+0xf4>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b22      	ldr	r3, [pc, #136]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a21      	ldr	r2, [pc, #132]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000318:	e035      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a22      	ldr	r2, [pc, #136]	@ (80003a8 <GPIO_PeriClockControl+0xf8>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a1c      	ldr	r2, [pc, #112]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032e:	e02a      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a1e      	ldr	r2, [pc, #120]	@ (80003ac <GPIO_PeriClockControl+0xfc>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a16      	ldr	r2, [pc, #88]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	e01f      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a19      	ldr	r2, [pc, #100]	@ (80003b0 <GPIO_PeriClockControl+0x100>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035a:	e014      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a15      	ldr	r2, [pc, #84]	@ (80003b4 <GPIO_PeriClockControl+0x104>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	e009      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a10      	ldr	r2, [pc, #64]	@ (80003b8 <GPIO_PeriClockControl+0x108>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d105      	bne.n	8000386 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800037a:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a06      	ldr	r2, [pc, #24]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 8000380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40020000 	.word	0x40020000
 8000398:	40023800 	.word	0x40023800
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020800 	.word	0x40020800
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40021400 	.word	0x40021400
 80003b0:	40021800 	.word	0x40021800
 80003b4:	40021c00 	.word	0x40021c00
 80003b8:	40022000 	.word	0x40022000

080003bc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff6e 	bl	80002b0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d820      	bhi.n	800041e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	2103      	movs	r1, #3
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	4619      	mov	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e0cb      	b.n	80005b6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	2b04      	cmp	r3, #4
 8000424:	d117      	bne.n	8000456 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000426:	4b4b      	ldr	r3, [pc, #300]	@ (8000554 <GPIO_Init+0x198>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	4611      	mov	r1, r2
 8000436:	4a47      	ldr	r2, [pc, #284]	@ (8000554 <GPIO_Init+0x198>)
 8000438:	430b      	orrs	r3, r1
 800043a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043c:	4b45      	ldr	r3, [pc, #276]	@ (8000554 <GPIO_Init+0x198>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7912      	ldrb	r2, [r2, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a41      	ldr	r2, [pc, #260]	@ (8000554 <GPIO_Init+0x198>)
 8000450:	400b      	ands	r3, r1
 8000452:	6093      	str	r3, [r2, #8]
 8000454:	e035      	b.n	80004c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	2b05      	cmp	r3, #5
 800045c:	d117      	bne.n	800048e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045e:	4b3d      	ldr	r3, [pc, #244]	@ (8000554 <GPIO_Init+0x198>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7912      	ldrb	r2, [r2, #4]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	4611      	mov	r1, r2
 800046e:	4a39      	ldr	r2, [pc, #228]	@ (8000554 <GPIO_Init+0x198>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000474:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <GPIO_Init+0x198>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	43d2      	mvns	r2, r2
 8000484:	4611      	mov	r1, r2
 8000486:	4a33      	ldr	r2, [pc, #204]	@ (8000554 <GPIO_Init+0x198>)
 8000488:	400b      	ands	r3, r1
 800048a:	60d3      	str	r3, [r2, #12]
 800048c:	e019      	b.n	80004c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	795b      	ldrb	r3, [r3, #5]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d115      	bne.n	80004c2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <GPIO_Init+0x198>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000554 <GPIO_Init+0x198>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ac:	4b29      	ldr	r3, [pc, #164]	@ (8000554 <GPIO_Init+0x198>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	7912      	ldrb	r2, [r2, #4]
 80004b4:	4611      	mov	r1, r2
 80004b6:	2201      	movs	r2, #1
 80004b8:	408a      	lsls	r2, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a25      	ldr	r2, [pc, #148]	@ (8000554 <GPIO_Init+0x198>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	f003 0303 	and.w	r3, r3, #3
 80004d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000558 <GPIO_Init+0x19c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d04e      	beq.n	800057c <GPIO_Init+0x1c0>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1e      	ldr	r2, [pc, #120]	@ (800055c <GPIO_Init+0x1a0>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d032      	beq.n	800054e <GPIO_Init+0x192>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000560 <GPIO_Init+0x1a4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d02b      	beq.n	800054a <GPIO_Init+0x18e>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <GPIO_Init+0x1a8>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d024      	beq.n	8000546 <GPIO_Init+0x18a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <GPIO_Init+0x1ac>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d01d      	beq.n	8000542 <GPIO_Init+0x186>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a18      	ldr	r2, [pc, #96]	@ (800056c <GPIO_Init+0x1b0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d016      	beq.n	800053e <GPIO_Init+0x182>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <GPIO_Init+0x1b4>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d00f      	beq.n	800053a <GPIO_Init+0x17e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <GPIO_Init+0x1b8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d008      	beq.n	8000536 <GPIO_Init+0x17a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <GPIO_Init+0x1bc>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d101      	bne.n	8000532 <GPIO_Init+0x176>
 800052e:	2308      	movs	r3, #8
 8000530:	e025      	b.n	800057e <GPIO_Init+0x1c2>
 8000532:	2300      	movs	r3, #0
 8000534:	e023      	b.n	800057e <GPIO_Init+0x1c2>
 8000536:	2307      	movs	r3, #7
 8000538:	e021      	b.n	800057e <GPIO_Init+0x1c2>
 800053a:	2306      	movs	r3, #6
 800053c:	e01f      	b.n	800057e <GPIO_Init+0x1c2>
 800053e:	2305      	movs	r3, #5
 8000540:	e01d      	b.n	800057e <GPIO_Init+0x1c2>
 8000542:	2304      	movs	r3, #4
 8000544:	e01b      	b.n	800057e <GPIO_Init+0x1c2>
 8000546:	2303      	movs	r3, #3
 8000548:	e019      	b.n	800057e <GPIO_Init+0x1c2>
 800054a:	2302      	movs	r3, #2
 800054c:	e017      	b.n	800057e <GPIO_Init+0x1c2>
 800054e:	2301      	movs	r3, #1
 8000550:	e015      	b.n	800057e <GPIO_Init+0x1c2>
 8000552:	bf00      	nop
 8000554:	40013c00 	.word	0x40013c00
 8000558:	40020000 	.word	0x40020000
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000
 800056c:	40021400 	.word	0x40021400
 8000570:	40021800 	.word	0x40021800
 8000574:	40021c00 	.word	0x40021c00
 8000578:	40022000 	.word	0x40022000
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <GPIO_Init+0x32c>)
 8000582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000584:	4a58      	ldr	r2, [pc, #352]	@ (80006e8 <GPIO_Init+0x32c>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800058c:	7c7a      	ldrb	r2, [r7, #17]
 800058e:	7cbb      	ldrb	r3, [r7, #18]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	fa02 f103 	lsl.w	r1, r2, r3
 8000596:	4a55      	ldr	r2, [pc, #340]	@ (80006ec <GPIO_Init+0x330>)
 8000598:	7cfb      	ldrb	r3, [r7, #19]
 800059a:	3302      	adds	r3, #2
 800059c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005a0:	4b53      	ldr	r3, [pc, #332]	@ (80006f0 <GPIO_Init+0x334>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7912      	ldrb	r2, [r2, #4]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a4f      	ldr	r2, [pc, #316]	@ (80006f0 <GPIO_Init+0x334>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	400a      	ands	r2, r1
 80005e4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6899      	ldr	r1, [r3, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	79db      	ldrb	r3, [r3, #7]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	2103      	movs	r1, #3
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	400a      	ands	r2, r1
 8000624:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68d9      	ldr	r1, [r3, #12]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	430a      	orrs	r2, r1
 8000634:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a1b      	ldrb	r3, [r3, #8]
 800063a:	461a      	mov	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	4619      	mov	r1, r3
 8000652:	2301      	movs	r3, #1
 8000654:	408b      	lsls	r3, r1
 8000656:	43db      	mvns	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	400a      	ands	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6859      	ldr	r1, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	430a      	orrs	r2, r1
 8000670:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	795b      	ldrb	r3, [r3, #5]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d131      	bne.n	80006de <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	7c3a      	ldrb	r2, [r7, #16]
 8000692:	3208      	adds	r2, #8
 8000694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	220f      	movs	r2, #15
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7c3a      	ldrb	r2, [r7, #16]
 80006ac:	4001      	ands	r1, r0
 80006ae:	3208      	adds	r2, #8
 80006b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	7c3a      	ldrb	r2, [r7, #16]
 80006ba:	3208      	adds	r2, #8
 80006bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a5b      	ldrb	r3, [r3, #9]
 80006c4:	461a      	mov	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7c3a      	ldrb	r2, [r7, #16]
 80006d6:	4301      	orrs	r1, r0
 80006d8:	3208      	adds	r2, #8
 80006da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40013c00 	.word	0x40013c00

080006f4 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691a      	ldr	r2, [r3, #16]
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	fa22 f303 	lsr.w	r3, r2, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]

   return value;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
 800072c:	4613      	mov	r3, r2
 800072e:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d109      	bne.n	800074a <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	78fa      	ldrb	r2, [r7, #3]
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	431a      	orrs	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000748:	e009      	b.n	800075e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	43d2      	mvns	r2, r2
 8000758:	401a      	ands	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	615a      	str	r2, [r3, #20]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d11f      	bne.n	80007be <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <SPI_PeriClockControl+0x60>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 800078c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else
	{
		//TODO
	}
}
 8000792:	e014      	b.n	80007be <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <SPI_PeriClockControl+0x68>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a8:	e009      	b.n	80007be <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <SPI_PeriClockControl+0x6c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d105      	bne.n	80007be <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <SPI_PeriClockControl+0x64>)
 80007b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40013000 	.word	0x40013000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40003800 	.word	0x40003800
 80007d8:	40003c00 	.word	0x40003c00

080007dc <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffbe 	bl	800076c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d104      	bne.n	8000812 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e014      	b.n	800083c <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d104      	bne.n	8000824 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00b      	b.n	800083c <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d107      	bne.n	800083c <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000832:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800083a:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	799b      	ldrb	r3, [r3, #6]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	02db      	lsls	r3, r3, #11
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7a1b      	ldrb	r3, [r3, #8]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	4313      	orrs	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a5b      	ldrb	r3, [r3, #9]
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7a9b      	ldrb	r3, [r3, #10]
 8000870:	025b      	lsls	r3, r3, #9
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4313      	orrs	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	4013      	ands	r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008bc:	e027      	b.n	800090e <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80008be:	bf00      	nop
 80008c0:	2102      	movs	r1, #2
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff ffe0 	bl	8000888 <SPI_GetFlagStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f8      	beq.n	80008c0 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00e      	beq.n	80008f8 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	60da      	str	r2, [r3, #12]
			Len--;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
			Len--;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	e00a      	b.n	800090e <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	60da      	str	r2, [r3, #12]
			Len--;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1d4      	bne.n	80008be <SPI_SendData+0xe>
		}
	}

}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <SPI_ReceiveData>:
 *
 * @Note              -

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800092a:	e027      	b.n	800097c <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 800092c:	bf00      	nop
 800092e:	2101      	movs	r1, #1
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff ffa9 	bl	8000888 <SPI_GetFlagStatus>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f8      	beq.n	800092e <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00e      	beq.n	8000966 <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	b29a      	uxth	r2, r3
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	801a      	strh	r2, [r3, #0]
				Len--;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
				Len--;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3301      	adds	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	e00a      	b.n	800097c <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	701a      	strb	r2, [r3, #0]
				Len--;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1d4      	bne.n	800092c <SPI_ReceiveData+0xe>
			}
		}

}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d106      	bne.n	80009ac <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80009aa:	e005      	b.n	80009b8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f043 0204 	orr.w	r2, r3, #4
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80009e2:	e005      	b.n	80009f0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f023 0204 	bic.w	r2, r3, #4
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	e002      	b.n	8000a0e <delay+0x12>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <delay+0x28>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d9f8      	bls.n	8000a08 <delay+0xc>
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	0003d08f 	.word	0x0003d08f

08000a28 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <SPI2_GPIOInits+0x58>)
 8000a30:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a36:	2305      	movs	r3, #5
 8000a38:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a42:	2302      	movs	r3, #2
 8000a44:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a46:	230d      	movs	r3, #13
 8000a48:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fcb5 	bl	80003bc <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a52:	230f      	movs	r3, #15
 8000a54:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fcaf 	bl	80003bc <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000a5e:	230e      	movs	r3, #14
 8000a60:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fca9 	bl	80003bc <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fca3 	bl	80003bc <GPIO_Init>


}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020400 	.word	0x40020400

08000a84 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <SPI2_Inits+0x34>)
 8000a8c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000a92:	2301      	movs	r3, #1
 8000a94:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000a96:	2304      	movs	r3, #4
 8000a98:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe97 	bl	80007dc <SPI_Init>
}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40003800 	.word	0x40003800

08000abc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

	GPIO_Handle_t led_1;

	GPIO_Handle_t btn;

	led_1.pGPIOx=GPIOA;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <GPIO_ButtonInit+0x60>)
 8000ac4:	60fb      	str	r3, [r7, #12]
	btn.pGPIOx=GPIOC;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <GPIO_ButtonInit+0x64>)
 8000ac8:	603b      	str	r3, [r7, #0]




     led_1.GPIO_PinConfig.GPIO_PinNumber= 5;
 8000aca:	2305      	movs	r3, #5
 8000acc:	743b      	strb	r3, [r7, #16]
     led_1.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	747b      	strb	r3, [r7, #17]
     led_1.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	753b      	strb	r3, [r7, #20]
     led_1.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	74fb      	strb	r3, [r7, #19]
     led_1.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	74bb      	strb	r3, [r7, #18]



     btn.GPIO_PinConfig.GPIO_PinNumber=13;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	713b      	strb	r3, [r7, #4]
     btn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	717b      	strb	r3, [r7, #5]
     btn.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	723b      	strb	r3, [r7, #8]
     btn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000aea:	2302      	movs	r3, #2
 8000aec:	71bb      	strb	r3, [r7, #6]
     btn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]

     	 GPIO_PeriClockControl(GPIOA,5);
 8000af2:	2105      	movs	r1, #5
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <GPIO_ButtonInit+0x60>)
 8000af6:	f7ff fbdb 	bl	80002b0 <GPIO_PeriClockControl>
         GPIO_PeriClockControl(GPIOC,13);
 8000afa:	210d      	movs	r1, #13
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <GPIO_ButtonInit+0x64>)
 8000afe:	f7ff fbd7 	bl	80002b0 <GPIO_PeriClockControl>



         GPIO_Init(&led_1);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fc58 	bl	80003bc <GPIO_Init>
         GPIO_Init(&btn);
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fc54 	bl	80003bc <GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020800 	.word	0x40020800

08000b24 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2bf5      	cmp	r3, #245	@ 0xf5
 8000b32:	d101      	bne.n	8000b38 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <main>:

int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000b4e:	23ff      	movs	r3, #255	@ 0xff
 8000b50:	71bb      	strb	r3, [r7, #6]
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 8000b52:	4837      	ldr	r0, [pc, #220]	@ (8000c30 <main+0xe8>)
 8000b54:	f000 faa0 	bl	8001098 <puts>

	GPIO_ButtonInit();
 8000b58:	f7ff ffb0 	bl	8000abc <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000b5c:	f7ff ff64 	bl	8000a28 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000b60:	f7ff ff90 	bl	8000a84 <SPI2_Inits>

	printf("SPI Init. done\n");
 8000b64:	4833      	ldr	r0, [pc, #204]	@ (8000c34 <main+0xec>)
 8000b66:	f000 fa97 	bl	8001098 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4832      	ldr	r0, [pc, #200]	@ (8000c38 <main+0xf0>)
 8000b6e:	f7ff ff29 	bl	80009c4 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		uint8_t pressed = GPIO_ReadFromInputPin(GPIOC,13);
 8000b72:	210d      	movs	r1, #13
 8000b74:	4831      	ldr	r0, [pc, #196]	@ (8000c3c <main+0xf4>)
 8000b76:	f7ff fdbd 	bl	80006f4 <GPIO_ReadFromInputPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
		printf("Value of pressed is %d",pressed);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4619      	mov	r1, r3
 8000b82:	482f      	ldr	r0, [pc, #188]	@ (8000c40 <main+0xf8>)
 8000b84:	f000 fa20 	bl	8000fc8 <iprintf>
		printf("pressed->%d",pressed);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	482d      	ldr	r0, [pc, #180]	@ (8000c44 <main+0xfc>)
 8000b8e:	f000 fa1b 	bl	8000fc8 <iprintf>
		if(pressed == 0)
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d145      	bne.n	8000c24 <main+0xdc>
		{
			//to avoid button de-bouncing related issues 200ms of delay
					delay();
 8000b98:	f7ff ff30 	bl	80009fc <delay>
					printf("Pressed !!!\n");
 8000b9c:	482a      	ldr	r0, [pc, #168]	@ (8000c48 <main+0x100>)
 8000b9e:	f000 fa7b 	bl	8001098 <puts>
			        GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5,1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <main+0x104>)
 8000ba8:	f7ff fdba 	bl	8000720 <GPIO_WriteToOutputPin>
			        printf("got in here\n");
 8000bac:	4828      	ldr	r0, [pc, #160]	@ (8000c50 <main+0x108>)
 8000bae:	f000 fa73 	bl	8001098 <puts>
					//enable the SPI2 peripheral
					SPI_PeripheralControl(SPI2,ENABLE);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4820      	ldr	r0, [pc, #128]	@ (8000c38 <main+0xf0>)
 8000bb6:	f7ff fee9 	bl	800098c <SPI_PeripheralControl>

				    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

					uint8_t commandcode = COMMAND_LED_CTRL;
 8000bba:	2350      	movs	r3, #80	@ 0x50
 8000bbc:	713b      	strb	r3, [r7, #4]
					uint8_t ackbyte;
					uint8_t args[2];

					//send command
					SPI_SendData(SPI2,&commandcode,1);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	@ (8000c38 <main+0xf0>)
 8000bc6:	f7ff fe73 	bl	80008b0 <SPI_SendData>

					//do dummy read to clear off the RXNE
					SPI_ReceiveData(SPI2,&dummy_read,1);
 8000bca:	1d7b      	adds	r3, r7, #5
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <main+0xf0>)
 8000bd2:	f7ff fea4 	bl	800091e <SPI_ReceiveData>


					//Send some dummy bits (1 byte) fetch the response from the slave
					SPI_SendData(SPI2,&dummy_write,1);
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <main+0xf0>)
 8000bde:	f7ff fe67 	bl	80008b0 <SPI_SendData>

					//read the ack byte received
					SPI_ReceiveData(SPI2,&ackbyte,1);
 8000be2:	1cfb      	adds	r3, r7, #3
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <main+0xf0>)
 8000bea:	f7ff fe98 	bl	800091e <SPI_ReceiveData>

					if( SPI_VerifyResponse(ackbyte))
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff97 	bl	8000b24 <SPI_VerifyResponse>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0ba      	beq.n	8000b72 <main+0x2a>
					{
						args[0] = LED_PIN;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	703b      	strb	r3, [r7, #0]
						args[1] = LED_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	707b      	strb	r3, [r7, #1]

						//send arguments
						SPI_SendData(SPI2,args,2);
 8000c04:	463b      	mov	r3, r7
 8000c06:	2202      	movs	r2, #2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <main+0xf0>)
 8000c0c:	f7ff fe50 	bl	80008b0 <SPI_SendData>
						// dummy read
						SPI_ReceiveData(SPI2,args,2);
 8000c10:	463b      	mov	r3, r7
 8000c12:	2202      	movs	r2, #2
 8000c14:	4619      	mov	r1, r3
 8000c16:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <main+0xf0>)
 8000c18:	f7ff fe81 	bl	800091e <SPI_ReceiveData>
						printf("COMMAND_LED_CTRL Executed\n");
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <main+0x10c>)
 8000c1e:	f000 fa3b 	bl	8001098 <puts>
 8000c22:	e7a6      	b.n	8000b72 <main+0x2a>
					}

		}
		else
		{
			 GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5,0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2105      	movs	r1, #5
 8000c28:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <main+0x104>)
 8000c2a:	f7ff fd79 	bl	8000720 <GPIO_WriteToOutputPin>
	{
 8000c2e:	e7a0      	b.n	8000b72 <main+0x2a>
 8000c30:	08001d78 	.word	0x08001d78
 8000c34:	08001d90 	.word	0x08001d90
 8000c38:	40003800 	.word	0x40003800
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	08001da0 	.word	0x08001da0
 8000c44:	08001db8 	.word	0x08001db8
 8000c48:	08001dc4 	.word	0x08001dc4
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	08001dd0 	.word	0x08001dd0
 8000c54:	08001ddc 	.word	0x08001ddc

08000c58 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <ITM_SendChar+0x48>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <ITM_SendChar+0x48>)
 8000c68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c6c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <ITM_SendChar+0x4c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <ITM_SendChar+0x4c>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c7a:	bf00      	nop
 8000c7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f8      	beq.n	8000c7c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c8a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000edfc 	.word	0xe000edfc
 8000ca4:	e0000e00 	.word	0xe0000e00

08000ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cba:	f3af 8000 	nop.w
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
  }

  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e009      	b.n	8000d08 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffab 	bl	8000c58 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf1      	blt.n	8000cf4 <_write+0x12>
  }
  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:

int _close(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d42:	605a      	str	r2, [r3, #4]
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_isatty>:

int _isatty(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f000 fa9e 	bl	80012f4 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000078 	.word	0x20000078
 8000dec:	200001c8 	.word	0x200001c8

08000df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1e:	f000 fa6f 	bl	8001300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff fe91 	bl	8000b48 <main>

08000e26 <LoopForever>:

LoopForever:
  b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e34:	08001e3c 	.word	0x08001e3c
  ldr r2, =_sbss
 8000e38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e3c:	200001c8 	.word	0x200001c8

08000e40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <std>:
 8000e44:	2300      	movs	r3, #0
 8000e46:	b510      	push	{r4, lr}
 8000e48:	4604      	mov	r4, r0
 8000e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8000e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e52:	6083      	str	r3, [r0, #8]
 8000e54:	8181      	strh	r1, [r0, #12]
 8000e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e58:	81c2      	strh	r2, [r0, #14]
 8000e5a:	6183      	str	r3, [r0, #24]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2208      	movs	r2, #8
 8000e60:	305c      	adds	r0, #92	@ 0x5c
 8000e62:	f000 f9f9 	bl	8001258 <memset>
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <std+0x58>)
 8000e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <std+0x5c>)
 8000e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <std+0x60>)
 8000e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <std+0x64>)
 8000e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <std+0x68>)
 8000e78:	6224      	str	r4, [r4, #32]
 8000e7a:	429c      	cmp	r4, r3
 8000e7c:	d006      	beq.n	8000e8c <std+0x48>
 8000e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e82:	4294      	cmp	r4, r2
 8000e84:	d002      	beq.n	8000e8c <std+0x48>
 8000e86:	33d0      	adds	r3, #208	@ 0xd0
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d105      	bne.n	8000e98 <std+0x54>
 8000e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e94:	f000 ba58 	b.w	8001348 <__retarget_lock_init_recursive>
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	bf00      	nop
 8000e9c:	080010a9 	.word	0x080010a9
 8000ea0:	080010cb 	.word	0x080010cb
 8000ea4:	08001103 	.word	0x08001103
 8000ea8:	08001127 	.word	0x08001127
 8000eac:	2000007c 	.word	0x2000007c

08000eb0 <stdio_exit_handler>:
 8000eb0:	4a02      	ldr	r2, [pc, #8]	@ (8000ebc <stdio_exit_handler+0xc>)
 8000eb2:	4903      	ldr	r1, [pc, #12]	@ (8000ec0 <stdio_exit_handler+0x10>)
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <stdio_exit_handler+0x14>)
 8000eb6:	f000 b869 	b.w	8000f8c <_fwalk_sglue>
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	08001be9 	.word	0x08001be9
 8000ec4:	20000010 	.word	0x20000010

08000ec8 <cleanup_stdio>:
 8000ec8:	6841      	ldr	r1, [r0, #4]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <cleanup_stdio+0x34>)
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	b510      	push	{r4, lr}
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	d001      	beq.n	8000ed8 <cleanup_stdio+0x10>
 8000ed4:	f000 fe88 	bl	8001be8 <_fflush_r>
 8000ed8:	68a1      	ldr	r1, [r4, #8]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <cleanup_stdio+0x38>)
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d002      	beq.n	8000ee6 <cleanup_stdio+0x1e>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f000 fe81 	bl	8001be8 <_fflush_r>
 8000ee6:	68e1      	ldr	r1, [r4, #12]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <cleanup_stdio+0x3c>)
 8000eea:	4299      	cmp	r1, r3
 8000eec:	d004      	beq.n	8000ef8 <cleanup_stdio+0x30>
 8000eee:	4620      	mov	r0, r4
 8000ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ef4:	f000 be78 	b.w	8001be8 <_fflush_r>
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	bf00      	nop
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	200000e4 	.word	0x200000e4
 8000f04:	2000014c 	.word	0x2000014c

08000f08 <global_stdio_init.part.0>:
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <global_stdio_init.part.0+0x30>)
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8000f3c <global_stdio_init.part.0+0x34>)
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f40 <global_stdio_init.part.0+0x38>)
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	4620      	mov	r0, r4
 8000f14:	2200      	movs	r2, #0
 8000f16:	2104      	movs	r1, #4
 8000f18:	f7ff ff94 	bl	8000e44 <std>
 8000f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f20:	2201      	movs	r2, #1
 8000f22:	2109      	movs	r1, #9
 8000f24:	f7ff ff8e 	bl	8000e44 <std>
 8000f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f32:	2112      	movs	r1, #18
 8000f34:	f7ff bf86 	b.w	8000e44 <std>
 8000f38:	200001b4 	.word	0x200001b4
 8000f3c:	2000007c 	.word	0x2000007c
 8000f40:	08000eb1 	.word	0x08000eb1

08000f44 <__sfp_lock_acquire>:
 8000f44:	4801      	ldr	r0, [pc, #4]	@ (8000f4c <__sfp_lock_acquire+0x8>)
 8000f46:	f000 ba00 	b.w	800134a <__retarget_lock_acquire_recursive>
 8000f4a:	bf00      	nop
 8000f4c:	200001bd 	.word	0x200001bd

08000f50 <__sfp_lock_release>:
 8000f50:	4801      	ldr	r0, [pc, #4]	@ (8000f58 <__sfp_lock_release+0x8>)
 8000f52:	f000 b9fb 	b.w	800134c <__retarget_lock_release_recursive>
 8000f56:	bf00      	nop
 8000f58:	200001bd 	.word	0x200001bd

08000f5c <__sinit>:
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	4604      	mov	r4, r0
 8000f60:	f7ff fff0 	bl	8000f44 <__sfp_lock_acquire>
 8000f64:	6a23      	ldr	r3, [r4, #32]
 8000f66:	b11b      	cbz	r3, 8000f70 <__sinit+0x14>
 8000f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f6c:	f7ff bff0 	b.w	8000f50 <__sfp_lock_release>
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__sinit+0x28>)
 8000f72:	6223      	str	r3, [r4, #32]
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__sinit+0x2c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f5      	bne.n	8000f68 <__sinit+0xc>
 8000f7c:	f7ff ffc4 	bl	8000f08 <global_stdio_init.part.0>
 8000f80:	e7f2      	b.n	8000f68 <__sinit+0xc>
 8000f82:	bf00      	nop
 8000f84:	08000ec9 	.word	0x08000ec9
 8000f88:	200001b4 	.word	0x200001b4

08000f8c <_fwalk_sglue>:
 8000f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f90:	4607      	mov	r7, r0
 8000f92:	4688      	mov	r8, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	2600      	movs	r6, #0
 8000f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8000fa0:	d505      	bpl.n	8000fae <_fwalk_sglue+0x22>
 8000fa2:	6824      	ldr	r4, [r4, #0]
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	d1f7      	bne.n	8000f98 <_fwalk_sglue+0xc>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fae:	89ab      	ldrh	r3, [r5, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d907      	bls.n	8000fc4 <_fwalk_sglue+0x38>
 8000fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	d003      	beq.n	8000fc4 <_fwalk_sglue+0x38>
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	47c0      	blx	r8
 8000fc2:	4306      	orrs	r6, r0
 8000fc4:	3568      	adds	r5, #104	@ 0x68
 8000fc6:	e7e9      	b.n	8000f9c <_fwalk_sglue+0x10>

08000fc8 <iprintf>:
 8000fc8:	b40f      	push	{r0, r1, r2, r3}
 8000fca:	b507      	push	{r0, r1, r2, lr}
 8000fcc:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <iprintf+0x20>)
 8000fce:	ab04      	add	r3, sp, #16
 8000fd0:	6808      	ldr	r0, [r1, #0]
 8000fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fd6:	6881      	ldr	r1, [r0, #8]
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f000 fadb 	bl	8001594 <_vfiprintf_r>
 8000fde:	b003      	add	sp, #12
 8000fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fe4:	b004      	add	sp, #16
 8000fe6:	4770      	bx	lr
 8000fe8:	2000000c 	.word	0x2000000c

08000fec <_puts_r>:
 8000fec:	6a03      	ldr	r3, [r0, #32]
 8000fee:	b570      	push	{r4, r5, r6, lr}
 8000ff0:	6884      	ldr	r4, [r0, #8]
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	460e      	mov	r6, r1
 8000ff6:	b90b      	cbnz	r3, 8000ffc <_puts_r+0x10>
 8000ff8:	f7ff ffb0 	bl	8000f5c <__sinit>
 8000ffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ffe:	07db      	lsls	r3, r3, #31
 8001000:	d405      	bmi.n	800100e <_puts_r+0x22>
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	0598      	lsls	r0, r3, #22
 8001006:	d402      	bmi.n	800100e <_puts_r+0x22>
 8001008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800100a:	f000 f99e 	bl	800134a <__retarget_lock_acquire_recursive>
 800100e:	89a3      	ldrh	r3, [r4, #12]
 8001010:	0719      	lsls	r1, r3, #28
 8001012:	d502      	bpl.n	800101a <_puts_r+0x2e>
 8001014:	6923      	ldr	r3, [r4, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d135      	bne.n	8001086 <_puts_r+0x9a>
 800101a:	4621      	mov	r1, r4
 800101c:	4628      	mov	r0, r5
 800101e:	f000 f8c5 	bl	80011ac <__swsetup_r>
 8001022:	b380      	cbz	r0, 8001086 <_puts_r+0x9a>
 8001024:	f04f 35ff 	mov.w	r5, #4294967295
 8001028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800102a:	07da      	lsls	r2, r3, #31
 800102c:	d405      	bmi.n	800103a <_puts_r+0x4e>
 800102e:	89a3      	ldrh	r3, [r4, #12]
 8001030:	059b      	lsls	r3, r3, #22
 8001032:	d402      	bmi.n	800103a <_puts_r+0x4e>
 8001034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001036:	f000 f989 	bl	800134c <__retarget_lock_release_recursive>
 800103a:	4628      	mov	r0, r5
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	2b00      	cmp	r3, #0
 8001040:	da04      	bge.n	800104c <_puts_r+0x60>
 8001042:	69a2      	ldr	r2, [r4, #24]
 8001044:	429a      	cmp	r2, r3
 8001046:	dc17      	bgt.n	8001078 <_puts_r+0x8c>
 8001048:	290a      	cmp	r1, #10
 800104a:	d015      	beq.n	8001078 <_puts_r+0x8c>
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	6022      	str	r2, [r4, #0]
 8001052:	7019      	strb	r1, [r3, #0]
 8001054:	68a3      	ldr	r3, [r4, #8]
 8001056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800105a:	3b01      	subs	r3, #1
 800105c:	60a3      	str	r3, [r4, #8]
 800105e:	2900      	cmp	r1, #0
 8001060:	d1ed      	bne.n	800103e <_puts_r+0x52>
 8001062:	2b00      	cmp	r3, #0
 8001064:	da11      	bge.n	800108a <_puts_r+0x9e>
 8001066:	4622      	mov	r2, r4
 8001068:	210a      	movs	r1, #10
 800106a:	4628      	mov	r0, r5
 800106c:	f000 f85f 	bl	800112e <__swbuf_r>
 8001070:	3001      	adds	r0, #1
 8001072:	d0d7      	beq.n	8001024 <_puts_r+0x38>
 8001074:	250a      	movs	r5, #10
 8001076:	e7d7      	b.n	8001028 <_puts_r+0x3c>
 8001078:	4622      	mov	r2, r4
 800107a:	4628      	mov	r0, r5
 800107c:	f000 f857 	bl	800112e <__swbuf_r>
 8001080:	3001      	adds	r0, #1
 8001082:	d1e7      	bne.n	8001054 <_puts_r+0x68>
 8001084:	e7ce      	b.n	8001024 <_puts_r+0x38>
 8001086:	3e01      	subs	r6, #1
 8001088:	e7e4      	b.n	8001054 <_puts_r+0x68>
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	6022      	str	r2, [r4, #0]
 8001090:	220a      	movs	r2, #10
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e7ee      	b.n	8001074 <_puts_r+0x88>
	...

08001098 <puts>:
 8001098:	4b02      	ldr	r3, [pc, #8]	@ (80010a4 <puts+0xc>)
 800109a:	4601      	mov	r1, r0
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f7ff bfa5 	b.w	8000fec <_puts_r>
 80010a2:	bf00      	nop
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <__sread>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	460c      	mov	r4, r1
 80010ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b0:	f000 f8fc 	bl	80012ac <_read_r>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	bfab      	itete	ge
 80010b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010ba:	89a3      	ldrhlt	r3, [r4, #12]
 80010bc:	181b      	addge	r3, r3, r0
 80010be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010c2:	bfac      	ite	ge
 80010c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010c6:	81a3      	strhlt	r3, [r4, #12]
 80010c8:	bd10      	pop	{r4, pc}

080010ca <__swrite>:
 80010ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ce:	461f      	mov	r7, r3
 80010d0:	898b      	ldrh	r3, [r1, #12]
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	4605      	mov	r5, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	4616      	mov	r6, r2
 80010da:	d505      	bpl.n	80010e8 <__swrite+0x1e>
 80010dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e0:	2302      	movs	r3, #2
 80010e2:	2200      	movs	r2, #0
 80010e4:	f000 f8d0 	bl	8001288 <_lseek_r>
 80010e8:	89a3      	ldrh	r3, [r4, #12]
 80010ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010f2:	81a3      	strh	r3, [r4, #12]
 80010f4:	4632      	mov	r2, r6
 80010f6:	463b      	mov	r3, r7
 80010f8:	4628      	mov	r0, r5
 80010fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010fe:	f000 b8e7 	b.w	80012d0 <_write_r>

08001102 <__sseek>:
 8001102:	b510      	push	{r4, lr}
 8001104:	460c      	mov	r4, r1
 8001106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110a:	f000 f8bd 	bl	8001288 <_lseek_r>
 800110e:	1c43      	adds	r3, r0, #1
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	bf15      	itete	ne
 8001114:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001116:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800111a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800111e:	81a3      	strheq	r3, [r4, #12]
 8001120:	bf18      	it	ne
 8001122:	81a3      	strhne	r3, [r4, #12]
 8001124:	bd10      	pop	{r4, pc}

08001126 <__sclose>:
 8001126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800112a:	f000 b89d 	b.w	8001268 <_close_r>

0800112e <__swbuf_r>:
 800112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001130:	460e      	mov	r6, r1
 8001132:	4614      	mov	r4, r2
 8001134:	4605      	mov	r5, r0
 8001136:	b118      	cbz	r0, 8001140 <__swbuf_r+0x12>
 8001138:	6a03      	ldr	r3, [r0, #32]
 800113a:	b90b      	cbnz	r3, 8001140 <__swbuf_r+0x12>
 800113c:	f7ff ff0e 	bl	8000f5c <__sinit>
 8001140:	69a3      	ldr	r3, [r4, #24]
 8001142:	60a3      	str	r3, [r4, #8]
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	071a      	lsls	r2, r3, #28
 8001148:	d501      	bpl.n	800114e <__swbuf_r+0x20>
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	b943      	cbnz	r3, 8001160 <__swbuf_r+0x32>
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	f000 f82b 	bl	80011ac <__swsetup_r>
 8001156:	b118      	cbz	r0, 8001160 <__swbuf_r+0x32>
 8001158:	f04f 37ff 	mov.w	r7, #4294967295
 800115c:	4638      	mov	r0, r7
 800115e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	6922      	ldr	r2, [r4, #16]
 8001164:	1a98      	subs	r0, r3, r2
 8001166:	6963      	ldr	r3, [r4, #20]
 8001168:	b2f6      	uxtb	r6, r6
 800116a:	4283      	cmp	r3, r0
 800116c:	4637      	mov	r7, r6
 800116e:	dc05      	bgt.n	800117c <__swbuf_r+0x4e>
 8001170:	4621      	mov	r1, r4
 8001172:	4628      	mov	r0, r5
 8001174:	f000 fd38 	bl	8001be8 <_fflush_r>
 8001178:	2800      	cmp	r0, #0
 800117a:	d1ed      	bne.n	8001158 <__swbuf_r+0x2a>
 800117c:	68a3      	ldr	r3, [r4, #8]
 800117e:	3b01      	subs	r3, #1
 8001180:	60a3      	str	r3, [r4, #8]
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	6022      	str	r2, [r4, #0]
 8001188:	701e      	strb	r6, [r3, #0]
 800118a:	6962      	ldr	r2, [r4, #20]
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	429a      	cmp	r2, r3
 8001190:	d004      	beq.n	800119c <__swbuf_r+0x6e>
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	07db      	lsls	r3, r3, #31
 8001196:	d5e1      	bpl.n	800115c <__swbuf_r+0x2e>
 8001198:	2e0a      	cmp	r6, #10
 800119a:	d1df      	bne.n	800115c <__swbuf_r+0x2e>
 800119c:	4621      	mov	r1, r4
 800119e:	4628      	mov	r0, r5
 80011a0:	f000 fd22 	bl	8001be8 <_fflush_r>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d0d9      	beq.n	800115c <__swbuf_r+0x2e>
 80011a8:	e7d6      	b.n	8001158 <__swbuf_r+0x2a>
	...

080011ac <__swsetup_r>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <__swsetup_r+0xa8>)
 80011b0:	4605      	mov	r5, r0
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	460c      	mov	r4, r1
 80011b6:	b118      	cbz	r0, 80011c0 <__swsetup_r+0x14>
 80011b8:	6a03      	ldr	r3, [r0, #32]
 80011ba:	b90b      	cbnz	r3, 80011c0 <__swsetup_r+0x14>
 80011bc:	f7ff fece 	bl	8000f5c <__sinit>
 80011c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011c4:	0719      	lsls	r1, r3, #28
 80011c6:	d422      	bmi.n	800120e <__swsetup_r+0x62>
 80011c8:	06da      	lsls	r2, r3, #27
 80011ca:	d407      	bmi.n	80011dc <__swsetup_r+0x30>
 80011cc:	2209      	movs	r2, #9
 80011ce:	602a      	str	r2, [r5, #0]
 80011d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d4:	81a3      	strh	r3, [r4, #12]
 80011d6:	f04f 30ff 	mov.w	r0, #4294967295
 80011da:	e033      	b.n	8001244 <__swsetup_r+0x98>
 80011dc:	0758      	lsls	r0, r3, #29
 80011de:	d512      	bpl.n	8001206 <__swsetup_r+0x5a>
 80011e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011e2:	b141      	cbz	r1, 80011f6 <__swsetup_r+0x4a>
 80011e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d002      	beq.n	80011f2 <__swsetup_r+0x46>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 f8af 	bl	8001350 <_free_r>
 80011f2:	2300      	movs	r3, #0
 80011f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	2300      	movs	r3, #0
 8001200:	6063      	str	r3, [r4, #4]
 8001202:	6923      	ldr	r3, [r4, #16]
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	81a3      	strh	r3, [r4, #12]
 800120e:	6923      	ldr	r3, [r4, #16]
 8001210:	b94b      	cbnz	r3, 8001226 <__swsetup_r+0x7a>
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121c:	d003      	beq.n	8001226 <__swsetup_r+0x7a>
 800121e:	4621      	mov	r1, r4
 8001220:	4628      	mov	r0, r5
 8001222:	f000 fd2f 	bl	8001c84 <__smakebuf_r>
 8001226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800122a:	f013 0201 	ands.w	r2, r3, #1
 800122e:	d00a      	beq.n	8001246 <__swsetup_r+0x9a>
 8001230:	2200      	movs	r2, #0
 8001232:	60a2      	str	r2, [r4, #8]
 8001234:	6962      	ldr	r2, [r4, #20]
 8001236:	4252      	negs	r2, r2
 8001238:	61a2      	str	r2, [r4, #24]
 800123a:	6922      	ldr	r2, [r4, #16]
 800123c:	b942      	cbnz	r2, 8001250 <__swsetup_r+0xa4>
 800123e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001242:	d1c5      	bne.n	80011d0 <__swsetup_r+0x24>
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	0799      	lsls	r1, r3, #30
 8001248:	bf58      	it	pl
 800124a:	6962      	ldrpl	r2, [r4, #20]
 800124c:	60a2      	str	r2, [r4, #8]
 800124e:	e7f4      	b.n	800123a <__swsetup_r+0x8e>
 8001250:	2000      	movs	r0, #0
 8001252:	e7f7      	b.n	8001244 <__swsetup_r+0x98>
 8001254:	2000000c 	.word	0x2000000c

08001258 <memset>:
 8001258:	4402      	add	r2, r0
 800125a:	4603      	mov	r3, r0
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <memset+0xa>
 8001260:	4770      	bx	lr
 8001262:	f803 1b01 	strb.w	r1, [r3], #1
 8001266:	e7f9      	b.n	800125c <memset+0x4>

08001268 <_close_r>:
 8001268:	b538      	push	{r3, r4, r5, lr}
 800126a:	4d06      	ldr	r5, [pc, #24]	@ (8001284 <_close_r+0x1c>)
 800126c:	2300      	movs	r3, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	f7ff fd51 	bl	8000d1a <_close>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_close_r+0x1a>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_close_r+0x1a>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200001b8 	.word	0x200001b8

08001288 <_lseek_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d07      	ldr	r5, [pc, #28]	@ (80012a8 <_lseek_r+0x20>)
 800128c:	4604      	mov	r4, r0
 800128e:	4608      	mov	r0, r1
 8001290:	4611      	mov	r1, r2
 8001292:	2200      	movs	r2, #0
 8001294:	602a      	str	r2, [r5, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	f7ff fd66 	bl	8000d68 <_lseek>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_lseek_r+0x1e>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_lseek_r+0x1e>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	200001b8 	.word	0x200001b8

080012ac <_read_r>:
 80012ac:	b538      	push	{r3, r4, r5, lr}
 80012ae:	4d07      	ldr	r5, [pc, #28]	@ (80012cc <_read_r+0x20>)
 80012b0:	4604      	mov	r4, r0
 80012b2:	4608      	mov	r0, r1
 80012b4:	4611      	mov	r1, r2
 80012b6:	2200      	movs	r2, #0
 80012b8:	602a      	str	r2, [r5, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	f7ff fcf4 	bl	8000ca8 <_read>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_read_r+0x1e>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_read_r+0x1e>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	200001b8 	.word	0x200001b8

080012d0 <_write_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d07      	ldr	r5, [pc, #28]	@ (80012f0 <_write_r+0x20>)
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	2200      	movs	r2, #0
 80012dc:	602a      	str	r2, [r5, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	f7ff fcff 	bl	8000ce2 <_write>
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d102      	bne.n	80012ee <_write_r+0x1e>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	b103      	cbz	r3, 80012ee <_write_r+0x1e>
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
 80012f0:	200001b8 	.word	0x200001b8

080012f4 <__errno>:
 80012f4:	4b01      	ldr	r3, [pc, #4]	@ (80012fc <__errno+0x8>)
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000000c 	.word	0x2000000c

08001300 <__libc_init_array>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	4d0d      	ldr	r5, [pc, #52]	@ (8001338 <__libc_init_array+0x38>)
 8001304:	4c0d      	ldr	r4, [pc, #52]	@ (800133c <__libc_init_array+0x3c>)
 8001306:	1b64      	subs	r4, r4, r5
 8001308:	10a4      	asrs	r4, r4, #2
 800130a:	2600      	movs	r6, #0
 800130c:	42a6      	cmp	r6, r4
 800130e:	d109      	bne.n	8001324 <__libc_init_array+0x24>
 8001310:	4d0b      	ldr	r5, [pc, #44]	@ (8001340 <__libc_init_array+0x40>)
 8001312:	4c0c      	ldr	r4, [pc, #48]	@ (8001344 <__libc_init_array+0x44>)
 8001314:	f000 fd24 	bl	8001d60 <_init>
 8001318:	1b64      	subs	r4, r4, r5
 800131a:	10a4      	asrs	r4, r4, #2
 800131c:	2600      	movs	r6, #0
 800131e:	42a6      	cmp	r6, r4
 8001320:	d105      	bne.n	800132e <__libc_init_array+0x2e>
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	f855 3b04 	ldr.w	r3, [r5], #4
 8001328:	4798      	blx	r3
 800132a:	3601      	adds	r6, #1
 800132c:	e7ee      	b.n	800130c <__libc_init_array+0xc>
 800132e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001332:	4798      	blx	r3
 8001334:	3601      	adds	r6, #1
 8001336:	e7f2      	b.n	800131e <__libc_init_array+0x1e>
 8001338:	08001e34 	.word	0x08001e34
 800133c:	08001e34 	.word	0x08001e34
 8001340:	08001e34 	.word	0x08001e34
 8001344:	08001e38 	.word	0x08001e38

08001348 <__retarget_lock_init_recursive>:
 8001348:	4770      	bx	lr

0800134a <__retarget_lock_acquire_recursive>:
 800134a:	4770      	bx	lr

0800134c <__retarget_lock_release_recursive>:
 800134c:	4770      	bx	lr
	...

08001350 <_free_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4605      	mov	r5, r0
 8001354:	2900      	cmp	r1, #0
 8001356:	d041      	beq.n	80013dc <_free_r+0x8c>
 8001358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800135c:	1f0c      	subs	r4, r1, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	bfb8      	it	lt
 8001362:	18e4      	addlt	r4, r4, r3
 8001364:	f000 f8e0 	bl	8001528 <__malloc_lock>
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <_free_r+0x90>)
 800136a:	6813      	ldr	r3, [r2, #0]
 800136c:	b933      	cbnz	r3, 800137c <_free_r+0x2c>
 800136e:	6063      	str	r3, [r4, #4]
 8001370:	6014      	str	r4, [r2, #0]
 8001372:	4628      	mov	r0, r5
 8001374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001378:	f000 b8dc 	b.w	8001534 <__malloc_unlock>
 800137c:	42a3      	cmp	r3, r4
 800137e:	d908      	bls.n	8001392 <_free_r+0x42>
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	1821      	adds	r1, r4, r0
 8001384:	428b      	cmp	r3, r1
 8001386:	bf01      	itttt	eq
 8001388:	6819      	ldreq	r1, [r3, #0]
 800138a:	685b      	ldreq	r3, [r3, #4]
 800138c:	1809      	addeq	r1, r1, r0
 800138e:	6021      	streq	r1, [r4, #0]
 8001390:	e7ed      	b.n	800136e <_free_r+0x1e>
 8001392:	461a      	mov	r2, r3
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	b10b      	cbz	r3, 800139c <_free_r+0x4c>
 8001398:	42a3      	cmp	r3, r4
 800139a:	d9fa      	bls.n	8001392 <_free_r+0x42>
 800139c:	6811      	ldr	r1, [r2, #0]
 800139e:	1850      	adds	r0, r2, r1
 80013a0:	42a0      	cmp	r0, r4
 80013a2:	d10b      	bne.n	80013bc <_free_r+0x6c>
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	4401      	add	r1, r0
 80013a8:	1850      	adds	r0, r2, r1
 80013aa:	4283      	cmp	r3, r0
 80013ac:	6011      	str	r1, [r2, #0]
 80013ae:	d1e0      	bne.n	8001372 <_free_r+0x22>
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	6053      	str	r3, [r2, #4]
 80013b6:	4408      	add	r0, r1
 80013b8:	6010      	str	r0, [r2, #0]
 80013ba:	e7da      	b.n	8001372 <_free_r+0x22>
 80013bc:	d902      	bls.n	80013c4 <_free_r+0x74>
 80013be:	230c      	movs	r3, #12
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	e7d6      	b.n	8001372 <_free_r+0x22>
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	1821      	adds	r1, r4, r0
 80013c8:	428b      	cmp	r3, r1
 80013ca:	bf04      	itt	eq
 80013cc:	6819      	ldreq	r1, [r3, #0]
 80013ce:	685b      	ldreq	r3, [r3, #4]
 80013d0:	6063      	str	r3, [r4, #4]
 80013d2:	bf04      	itt	eq
 80013d4:	1809      	addeq	r1, r1, r0
 80013d6:	6021      	streq	r1, [r4, #0]
 80013d8:	6054      	str	r4, [r2, #4]
 80013da:	e7ca      	b.n	8001372 <_free_r+0x22>
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
 80013de:	bf00      	nop
 80013e0:	200001c4 	.word	0x200001c4

080013e4 <sbrk_aligned>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4e0f      	ldr	r6, [pc, #60]	@ (8001424 <sbrk_aligned+0x40>)
 80013e8:	460c      	mov	r4, r1
 80013ea:	6831      	ldr	r1, [r6, #0]
 80013ec:	4605      	mov	r5, r0
 80013ee:	b911      	cbnz	r1, 80013f6 <sbrk_aligned+0x12>
 80013f0:	f000 fca6 	bl	8001d40 <_sbrk_r>
 80013f4:	6030      	str	r0, [r6, #0]
 80013f6:	4621      	mov	r1, r4
 80013f8:	4628      	mov	r0, r5
 80013fa:	f000 fca1 	bl	8001d40 <_sbrk_r>
 80013fe:	1c43      	adds	r3, r0, #1
 8001400:	d103      	bne.n	800140a <sbrk_aligned+0x26>
 8001402:	f04f 34ff 	mov.w	r4, #4294967295
 8001406:	4620      	mov	r0, r4
 8001408:	bd70      	pop	{r4, r5, r6, pc}
 800140a:	1cc4      	adds	r4, r0, #3
 800140c:	f024 0403 	bic.w	r4, r4, #3
 8001410:	42a0      	cmp	r0, r4
 8001412:	d0f8      	beq.n	8001406 <sbrk_aligned+0x22>
 8001414:	1a21      	subs	r1, r4, r0
 8001416:	4628      	mov	r0, r5
 8001418:	f000 fc92 	bl	8001d40 <_sbrk_r>
 800141c:	3001      	adds	r0, #1
 800141e:	d1f2      	bne.n	8001406 <sbrk_aligned+0x22>
 8001420:	e7ef      	b.n	8001402 <sbrk_aligned+0x1e>
 8001422:	bf00      	nop
 8001424:	200001c0 	.word	0x200001c0

08001428 <_malloc_r>:
 8001428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800142c:	1ccd      	adds	r5, r1, #3
 800142e:	f025 0503 	bic.w	r5, r5, #3
 8001432:	3508      	adds	r5, #8
 8001434:	2d0c      	cmp	r5, #12
 8001436:	bf38      	it	cc
 8001438:	250c      	movcc	r5, #12
 800143a:	2d00      	cmp	r5, #0
 800143c:	4606      	mov	r6, r0
 800143e:	db01      	blt.n	8001444 <_malloc_r+0x1c>
 8001440:	42a9      	cmp	r1, r5
 8001442:	d904      	bls.n	800144e <_malloc_r+0x26>
 8001444:	230c      	movs	r3, #12
 8001446:	6033      	str	r3, [r6, #0]
 8001448:	2000      	movs	r0, #0
 800144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800144e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001524 <_malloc_r+0xfc>
 8001452:	f000 f869 	bl	8001528 <__malloc_lock>
 8001456:	f8d8 3000 	ldr.w	r3, [r8]
 800145a:	461c      	mov	r4, r3
 800145c:	bb44      	cbnz	r4, 80014b0 <_malloc_r+0x88>
 800145e:	4629      	mov	r1, r5
 8001460:	4630      	mov	r0, r6
 8001462:	f7ff ffbf 	bl	80013e4 <sbrk_aligned>
 8001466:	1c43      	adds	r3, r0, #1
 8001468:	4604      	mov	r4, r0
 800146a:	d158      	bne.n	800151e <_malloc_r+0xf6>
 800146c:	f8d8 4000 	ldr.w	r4, [r8]
 8001470:	4627      	mov	r7, r4
 8001472:	2f00      	cmp	r7, #0
 8001474:	d143      	bne.n	80014fe <_malloc_r+0xd6>
 8001476:	2c00      	cmp	r4, #0
 8001478:	d04b      	beq.n	8001512 <_malloc_r+0xea>
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	4639      	mov	r1, r7
 800147e:	4630      	mov	r0, r6
 8001480:	eb04 0903 	add.w	r9, r4, r3
 8001484:	f000 fc5c 	bl	8001d40 <_sbrk_r>
 8001488:	4581      	cmp	r9, r0
 800148a:	d142      	bne.n	8001512 <_malloc_r+0xea>
 800148c:	6821      	ldr	r1, [r4, #0]
 800148e:	1a6d      	subs	r5, r5, r1
 8001490:	4629      	mov	r1, r5
 8001492:	4630      	mov	r0, r6
 8001494:	f7ff ffa6 	bl	80013e4 <sbrk_aligned>
 8001498:	3001      	adds	r0, #1
 800149a:	d03a      	beq.n	8001512 <_malloc_r+0xea>
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	442b      	add	r3, r5
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	f8d8 3000 	ldr.w	r3, [r8]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	bb62      	cbnz	r2, 8001504 <_malloc_r+0xdc>
 80014aa:	f8c8 7000 	str.w	r7, [r8]
 80014ae:	e00f      	b.n	80014d0 <_malloc_r+0xa8>
 80014b0:	6822      	ldr	r2, [r4, #0]
 80014b2:	1b52      	subs	r2, r2, r5
 80014b4:	d420      	bmi.n	80014f8 <_malloc_r+0xd0>
 80014b6:	2a0b      	cmp	r2, #11
 80014b8:	d917      	bls.n	80014ea <_malloc_r+0xc2>
 80014ba:	1961      	adds	r1, r4, r5
 80014bc:	42a3      	cmp	r3, r4
 80014be:	6025      	str	r5, [r4, #0]
 80014c0:	bf18      	it	ne
 80014c2:	6059      	strne	r1, [r3, #4]
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	bf08      	it	eq
 80014c8:	f8c8 1000 	streq.w	r1, [r8]
 80014cc:	5162      	str	r2, [r4, r5]
 80014ce:	604b      	str	r3, [r1, #4]
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f82f 	bl	8001534 <__malloc_unlock>
 80014d6:	f104 000b 	add.w	r0, r4, #11
 80014da:	1d23      	adds	r3, r4, #4
 80014dc:	f020 0007 	bic.w	r0, r0, #7
 80014e0:	1ac2      	subs	r2, r0, r3
 80014e2:	bf1c      	itt	ne
 80014e4:	1a1b      	subne	r3, r3, r0
 80014e6:	50a3      	strne	r3, [r4, r2]
 80014e8:	e7af      	b.n	800144a <_malloc_r+0x22>
 80014ea:	6862      	ldr	r2, [r4, #4]
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	bf0c      	ite	eq
 80014f0:	f8c8 2000 	streq.w	r2, [r8]
 80014f4:	605a      	strne	r2, [r3, #4]
 80014f6:	e7eb      	b.n	80014d0 <_malloc_r+0xa8>
 80014f8:	4623      	mov	r3, r4
 80014fa:	6864      	ldr	r4, [r4, #4]
 80014fc:	e7ae      	b.n	800145c <_malloc_r+0x34>
 80014fe:	463c      	mov	r4, r7
 8001500:	687f      	ldr	r7, [r7, #4]
 8001502:	e7b6      	b.n	8001472 <_malloc_r+0x4a>
 8001504:	461a      	mov	r2, r3
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	42a3      	cmp	r3, r4
 800150a:	d1fb      	bne.n	8001504 <_malloc_r+0xdc>
 800150c:	2300      	movs	r3, #0
 800150e:	6053      	str	r3, [r2, #4]
 8001510:	e7de      	b.n	80014d0 <_malloc_r+0xa8>
 8001512:	230c      	movs	r3, #12
 8001514:	6033      	str	r3, [r6, #0]
 8001516:	4630      	mov	r0, r6
 8001518:	f000 f80c 	bl	8001534 <__malloc_unlock>
 800151c:	e794      	b.n	8001448 <_malloc_r+0x20>
 800151e:	6005      	str	r5, [r0, #0]
 8001520:	e7d6      	b.n	80014d0 <_malloc_r+0xa8>
 8001522:	bf00      	nop
 8001524:	200001c4 	.word	0x200001c4

08001528 <__malloc_lock>:
 8001528:	4801      	ldr	r0, [pc, #4]	@ (8001530 <__malloc_lock+0x8>)
 800152a:	f7ff bf0e 	b.w	800134a <__retarget_lock_acquire_recursive>
 800152e:	bf00      	nop
 8001530:	200001bc 	.word	0x200001bc

08001534 <__malloc_unlock>:
 8001534:	4801      	ldr	r0, [pc, #4]	@ (800153c <__malloc_unlock+0x8>)
 8001536:	f7ff bf09 	b.w	800134c <__retarget_lock_release_recursive>
 800153a:	bf00      	nop
 800153c:	200001bc 	.word	0x200001bc

08001540 <__sfputc_r>:
 8001540:	6893      	ldr	r3, [r2, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	b410      	push	{r4}
 8001548:	6093      	str	r3, [r2, #8]
 800154a:	da08      	bge.n	800155e <__sfputc_r+0x1e>
 800154c:	6994      	ldr	r4, [r2, #24]
 800154e:	42a3      	cmp	r3, r4
 8001550:	db01      	blt.n	8001556 <__sfputc_r+0x16>
 8001552:	290a      	cmp	r1, #10
 8001554:	d103      	bne.n	800155e <__sfputc_r+0x1e>
 8001556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800155a:	f7ff bde8 	b.w	800112e <__swbuf_r>
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	1c58      	adds	r0, r3, #1
 8001562:	6010      	str	r0, [r2, #0]
 8001564:	7019      	strb	r1, [r3, #0]
 8001566:	4608      	mov	r0, r1
 8001568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800156c:	4770      	bx	lr

0800156e <__sfputs_r>:
 800156e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001570:	4606      	mov	r6, r0
 8001572:	460f      	mov	r7, r1
 8001574:	4614      	mov	r4, r2
 8001576:	18d5      	adds	r5, r2, r3
 8001578:	42ac      	cmp	r4, r5
 800157a:	d101      	bne.n	8001580 <__sfputs_r+0x12>
 800157c:	2000      	movs	r0, #0
 800157e:	e007      	b.n	8001590 <__sfputs_r+0x22>
 8001580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001584:	463a      	mov	r2, r7
 8001586:	4630      	mov	r0, r6
 8001588:	f7ff ffda 	bl	8001540 <__sfputc_r>
 800158c:	1c43      	adds	r3, r0, #1
 800158e:	d1f3      	bne.n	8001578 <__sfputs_r+0xa>
 8001590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001594 <_vfiprintf_r>:
 8001594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001598:	460d      	mov	r5, r1
 800159a:	b09d      	sub	sp, #116	@ 0x74
 800159c:	4614      	mov	r4, r2
 800159e:	4698      	mov	r8, r3
 80015a0:	4606      	mov	r6, r0
 80015a2:	b118      	cbz	r0, 80015ac <_vfiprintf_r+0x18>
 80015a4:	6a03      	ldr	r3, [r0, #32]
 80015a6:	b90b      	cbnz	r3, 80015ac <_vfiprintf_r+0x18>
 80015a8:	f7ff fcd8 	bl	8000f5c <__sinit>
 80015ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80015ae:	07d9      	lsls	r1, r3, #31
 80015b0:	d405      	bmi.n	80015be <_vfiprintf_r+0x2a>
 80015b2:	89ab      	ldrh	r3, [r5, #12]
 80015b4:	059a      	lsls	r2, r3, #22
 80015b6:	d402      	bmi.n	80015be <_vfiprintf_r+0x2a>
 80015b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015ba:	f7ff fec6 	bl	800134a <__retarget_lock_acquire_recursive>
 80015be:	89ab      	ldrh	r3, [r5, #12]
 80015c0:	071b      	lsls	r3, r3, #28
 80015c2:	d501      	bpl.n	80015c8 <_vfiprintf_r+0x34>
 80015c4:	692b      	ldr	r3, [r5, #16]
 80015c6:	b99b      	cbnz	r3, 80015f0 <_vfiprintf_r+0x5c>
 80015c8:	4629      	mov	r1, r5
 80015ca:	4630      	mov	r0, r6
 80015cc:	f7ff fdee 	bl	80011ac <__swsetup_r>
 80015d0:	b170      	cbz	r0, 80015f0 <_vfiprintf_r+0x5c>
 80015d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80015d4:	07dc      	lsls	r4, r3, #31
 80015d6:	d504      	bpl.n	80015e2 <_vfiprintf_r+0x4e>
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	b01d      	add	sp, #116	@ 0x74
 80015de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e2:	89ab      	ldrh	r3, [r5, #12]
 80015e4:	0598      	lsls	r0, r3, #22
 80015e6:	d4f7      	bmi.n	80015d8 <_vfiprintf_r+0x44>
 80015e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015ea:	f7ff feaf 	bl	800134c <__retarget_lock_release_recursive>
 80015ee:	e7f3      	b.n	80015d8 <_vfiprintf_r+0x44>
 80015f0:	2300      	movs	r3, #0
 80015f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80015f4:	2320      	movs	r3, #32
 80015f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80015fe:	2330      	movs	r3, #48	@ 0x30
 8001600:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80017b0 <_vfiprintf_r+0x21c>
 8001604:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001608:	f04f 0901 	mov.w	r9, #1
 800160c:	4623      	mov	r3, r4
 800160e:	469a      	mov	sl, r3
 8001610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001614:	b10a      	cbz	r2, 800161a <_vfiprintf_r+0x86>
 8001616:	2a25      	cmp	r2, #37	@ 0x25
 8001618:	d1f9      	bne.n	800160e <_vfiprintf_r+0x7a>
 800161a:	ebba 0b04 	subs.w	fp, sl, r4
 800161e:	d00b      	beq.n	8001638 <_vfiprintf_r+0xa4>
 8001620:	465b      	mov	r3, fp
 8001622:	4622      	mov	r2, r4
 8001624:	4629      	mov	r1, r5
 8001626:	4630      	mov	r0, r6
 8001628:	f7ff ffa1 	bl	800156e <__sfputs_r>
 800162c:	3001      	adds	r0, #1
 800162e:	f000 80a7 	beq.w	8001780 <_vfiprintf_r+0x1ec>
 8001632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001634:	445a      	add	r2, fp
 8001636:	9209      	str	r2, [sp, #36]	@ 0x24
 8001638:	f89a 3000 	ldrb.w	r3, [sl]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 809f 	beq.w	8001780 <_vfiprintf_r+0x1ec>
 8001642:	2300      	movs	r3, #0
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800164c:	f10a 0a01 	add.w	sl, sl, #1
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	9307      	str	r3, [sp, #28]
 8001654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001658:	931a      	str	r3, [sp, #104]	@ 0x68
 800165a:	4654      	mov	r4, sl
 800165c:	2205      	movs	r2, #5
 800165e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001662:	4853      	ldr	r0, [pc, #332]	@ (80017b0 <_vfiprintf_r+0x21c>)
 8001664:	f7fe fdd4 	bl	8000210 <memchr>
 8001668:	9a04      	ldr	r2, [sp, #16]
 800166a:	b9d8      	cbnz	r0, 80016a4 <_vfiprintf_r+0x110>
 800166c:	06d1      	lsls	r1, r2, #27
 800166e:	bf44      	itt	mi
 8001670:	2320      	movmi	r3, #32
 8001672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001676:	0713      	lsls	r3, r2, #28
 8001678:	bf44      	itt	mi
 800167a:	232b      	movmi	r3, #43	@ 0x2b
 800167c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001680:	f89a 3000 	ldrb.w	r3, [sl]
 8001684:	2b2a      	cmp	r3, #42	@ 0x2a
 8001686:	d015      	beq.n	80016b4 <_vfiprintf_r+0x120>
 8001688:	9a07      	ldr	r2, [sp, #28]
 800168a:	4654      	mov	r4, sl
 800168c:	2000      	movs	r0, #0
 800168e:	f04f 0c0a 	mov.w	ip, #10
 8001692:	4621      	mov	r1, r4
 8001694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001698:	3b30      	subs	r3, #48	@ 0x30
 800169a:	2b09      	cmp	r3, #9
 800169c:	d94b      	bls.n	8001736 <_vfiprintf_r+0x1a2>
 800169e:	b1b0      	cbz	r0, 80016ce <_vfiprintf_r+0x13a>
 80016a0:	9207      	str	r2, [sp, #28]
 80016a2:	e014      	b.n	80016ce <_vfiprintf_r+0x13a>
 80016a4:	eba0 0308 	sub.w	r3, r0, r8
 80016a8:	fa09 f303 	lsl.w	r3, r9, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	46a2      	mov	sl, r4
 80016b2:	e7d2      	b.n	800165a <_vfiprintf_r+0xc6>
 80016b4:	9b03      	ldr	r3, [sp, #12]
 80016b6:	1d19      	adds	r1, r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	9103      	str	r1, [sp, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bfbb      	ittet	lt
 80016c0:	425b      	neglt	r3, r3
 80016c2:	f042 0202 	orrlt.w	r2, r2, #2
 80016c6:	9307      	strge	r3, [sp, #28]
 80016c8:	9307      	strlt	r3, [sp, #28]
 80016ca:	bfb8      	it	lt
 80016cc:	9204      	strlt	r2, [sp, #16]
 80016ce:	7823      	ldrb	r3, [r4, #0]
 80016d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80016d2:	d10a      	bne.n	80016ea <_vfiprintf_r+0x156>
 80016d4:	7863      	ldrb	r3, [r4, #1]
 80016d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80016d8:	d132      	bne.n	8001740 <_vfiprintf_r+0x1ac>
 80016da:	9b03      	ldr	r3, [sp, #12]
 80016dc:	1d1a      	adds	r2, r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	9203      	str	r2, [sp, #12]
 80016e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80016e6:	3402      	adds	r4, #2
 80016e8:	9305      	str	r3, [sp, #20]
 80016ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80017c0 <_vfiprintf_r+0x22c>
 80016ee:	7821      	ldrb	r1, [r4, #0]
 80016f0:	2203      	movs	r2, #3
 80016f2:	4650      	mov	r0, sl
 80016f4:	f7fe fd8c 	bl	8000210 <memchr>
 80016f8:	b138      	cbz	r0, 800170a <_vfiprintf_r+0x176>
 80016fa:	9b04      	ldr	r3, [sp, #16]
 80016fc:	eba0 000a 	sub.w	r0, r0, sl
 8001700:	2240      	movs	r2, #64	@ 0x40
 8001702:	4082      	lsls	r2, r0
 8001704:	4313      	orrs	r3, r2
 8001706:	3401      	adds	r4, #1
 8001708:	9304      	str	r3, [sp, #16]
 800170a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800170e:	4829      	ldr	r0, [pc, #164]	@ (80017b4 <_vfiprintf_r+0x220>)
 8001710:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001714:	2206      	movs	r2, #6
 8001716:	f7fe fd7b 	bl	8000210 <memchr>
 800171a:	2800      	cmp	r0, #0
 800171c:	d03f      	beq.n	800179e <_vfiprintf_r+0x20a>
 800171e:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <_vfiprintf_r+0x224>)
 8001720:	bb1b      	cbnz	r3, 800176a <_vfiprintf_r+0x1d6>
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	3307      	adds	r3, #7
 8001726:	f023 0307 	bic.w	r3, r3, #7
 800172a:	3308      	adds	r3, #8
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001730:	443b      	add	r3, r7
 8001732:	9309      	str	r3, [sp, #36]	@ 0x24
 8001734:	e76a      	b.n	800160c <_vfiprintf_r+0x78>
 8001736:	fb0c 3202 	mla	r2, ip, r2, r3
 800173a:	460c      	mov	r4, r1
 800173c:	2001      	movs	r0, #1
 800173e:	e7a8      	b.n	8001692 <_vfiprintf_r+0xfe>
 8001740:	2300      	movs	r3, #0
 8001742:	3401      	adds	r4, #1
 8001744:	9305      	str	r3, [sp, #20]
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 0c0a 	mov.w	ip, #10
 800174c:	4620      	mov	r0, r4
 800174e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001752:	3a30      	subs	r2, #48	@ 0x30
 8001754:	2a09      	cmp	r2, #9
 8001756:	d903      	bls.n	8001760 <_vfiprintf_r+0x1cc>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0c6      	beq.n	80016ea <_vfiprintf_r+0x156>
 800175c:	9105      	str	r1, [sp, #20]
 800175e:	e7c4      	b.n	80016ea <_vfiprintf_r+0x156>
 8001760:	fb0c 2101 	mla	r1, ip, r1, r2
 8001764:	4604      	mov	r4, r0
 8001766:	2301      	movs	r3, #1
 8001768:	e7f0      	b.n	800174c <_vfiprintf_r+0x1b8>
 800176a:	ab03      	add	r3, sp, #12
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	462a      	mov	r2, r5
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <_vfiprintf_r+0x228>)
 8001772:	a904      	add	r1, sp, #16
 8001774:	4630      	mov	r0, r6
 8001776:	f3af 8000 	nop.w
 800177a:	4607      	mov	r7, r0
 800177c:	1c78      	adds	r0, r7, #1
 800177e:	d1d6      	bne.n	800172e <_vfiprintf_r+0x19a>
 8001780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001782:	07d9      	lsls	r1, r3, #31
 8001784:	d405      	bmi.n	8001792 <_vfiprintf_r+0x1fe>
 8001786:	89ab      	ldrh	r3, [r5, #12]
 8001788:	059a      	lsls	r2, r3, #22
 800178a:	d402      	bmi.n	8001792 <_vfiprintf_r+0x1fe>
 800178c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800178e:	f7ff fddd 	bl	800134c <__retarget_lock_release_recursive>
 8001792:	89ab      	ldrh	r3, [r5, #12]
 8001794:	065b      	lsls	r3, r3, #25
 8001796:	f53f af1f 	bmi.w	80015d8 <_vfiprintf_r+0x44>
 800179a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800179c:	e71e      	b.n	80015dc <_vfiprintf_r+0x48>
 800179e:	ab03      	add	r3, sp, #12
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	462a      	mov	r2, r5
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <_vfiprintf_r+0x228>)
 80017a6:	a904      	add	r1, sp, #16
 80017a8:	4630      	mov	r0, r6
 80017aa:	f000 f879 	bl	80018a0 <_printf_i>
 80017ae:	e7e4      	b.n	800177a <_vfiprintf_r+0x1e6>
 80017b0:	08001df6 	.word	0x08001df6
 80017b4:	08001e00 	.word	0x08001e00
 80017b8:	00000000 	.word	0x00000000
 80017bc:	0800156f 	.word	0x0800156f
 80017c0:	08001dfc 	.word	0x08001dfc

080017c4 <_printf_common>:
 80017c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c8:	4616      	mov	r6, r2
 80017ca:	4698      	mov	r8, r3
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	690b      	ldr	r3, [r1, #16]
 80017d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bfb8      	it	lt
 80017d8:	4613      	movlt	r3, r2
 80017da:	6033      	str	r3, [r6, #0]
 80017dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80017e0:	4607      	mov	r7, r0
 80017e2:	460c      	mov	r4, r1
 80017e4:	b10a      	cbz	r2, 80017ea <_printf_common+0x26>
 80017e6:	3301      	adds	r3, #1
 80017e8:	6033      	str	r3, [r6, #0]
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	0699      	lsls	r1, r3, #26
 80017ee:	bf42      	ittt	mi
 80017f0:	6833      	ldrmi	r3, [r6, #0]
 80017f2:	3302      	addmi	r3, #2
 80017f4:	6033      	strmi	r3, [r6, #0]
 80017f6:	6825      	ldr	r5, [r4, #0]
 80017f8:	f015 0506 	ands.w	r5, r5, #6
 80017fc:	d106      	bne.n	800180c <_printf_common+0x48>
 80017fe:	f104 0a19 	add.w	sl, r4, #25
 8001802:	68e3      	ldr	r3, [r4, #12]
 8001804:	6832      	ldr	r2, [r6, #0]
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	42ab      	cmp	r3, r5
 800180a:	dc26      	bgt.n	800185a <_printf_common+0x96>
 800180c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001810:	6822      	ldr	r2, [r4, #0]
 8001812:	3b00      	subs	r3, #0
 8001814:	bf18      	it	ne
 8001816:	2301      	movne	r3, #1
 8001818:	0692      	lsls	r2, r2, #26
 800181a:	d42b      	bmi.n	8001874 <_printf_common+0xb0>
 800181c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001820:	4641      	mov	r1, r8
 8001822:	4638      	mov	r0, r7
 8001824:	47c8      	blx	r9
 8001826:	3001      	adds	r0, #1
 8001828:	d01e      	beq.n	8001868 <_printf_common+0xa4>
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	6922      	ldr	r2, [r4, #16]
 800182e:	f003 0306 	and.w	r3, r3, #6
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf02      	ittt	eq
 8001836:	68e5      	ldreq	r5, [r4, #12]
 8001838:	6833      	ldreq	r3, [r6, #0]
 800183a:	1aed      	subeq	r5, r5, r3
 800183c:	68a3      	ldr	r3, [r4, #8]
 800183e:	bf0c      	ite	eq
 8001840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001844:	2500      	movne	r5, #0
 8001846:	4293      	cmp	r3, r2
 8001848:	bfc4      	itt	gt
 800184a:	1a9b      	subgt	r3, r3, r2
 800184c:	18ed      	addgt	r5, r5, r3
 800184e:	2600      	movs	r6, #0
 8001850:	341a      	adds	r4, #26
 8001852:	42b5      	cmp	r5, r6
 8001854:	d11a      	bne.n	800188c <_printf_common+0xc8>
 8001856:	2000      	movs	r0, #0
 8001858:	e008      	b.n	800186c <_printf_common+0xa8>
 800185a:	2301      	movs	r3, #1
 800185c:	4652      	mov	r2, sl
 800185e:	4641      	mov	r1, r8
 8001860:	4638      	mov	r0, r7
 8001862:	47c8      	blx	r9
 8001864:	3001      	adds	r0, #1
 8001866:	d103      	bne.n	8001870 <_printf_common+0xac>
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001870:	3501      	adds	r5, #1
 8001872:	e7c6      	b.n	8001802 <_printf_common+0x3e>
 8001874:	18e1      	adds	r1, r4, r3
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	2030      	movs	r0, #48	@ 0x30
 800187a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800187e:	4422      	add	r2, r4
 8001880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001888:	3302      	adds	r3, #2
 800188a:	e7c7      	b.n	800181c <_printf_common+0x58>
 800188c:	2301      	movs	r3, #1
 800188e:	4622      	mov	r2, r4
 8001890:	4641      	mov	r1, r8
 8001892:	4638      	mov	r0, r7
 8001894:	47c8      	blx	r9
 8001896:	3001      	adds	r0, #1
 8001898:	d0e6      	beq.n	8001868 <_printf_common+0xa4>
 800189a:	3601      	adds	r6, #1
 800189c:	e7d9      	b.n	8001852 <_printf_common+0x8e>
	...

080018a0 <_printf_i>:
 80018a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018a4:	7e0f      	ldrb	r7, [r1, #24]
 80018a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80018a8:	2f78      	cmp	r7, #120	@ 0x78
 80018aa:	4691      	mov	r9, r2
 80018ac:	4680      	mov	r8, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	469a      	mov	sl, r3
 80018b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80018b6:	d807      	bhi.n	80018c8 <_printf_i+0x28>
 80018b8:	2f62      	cmp	r7, #98	@ 0x62
 80018ba:	d80a      	bhi.n	80018d2 <_printf_i+0x32>
 80018bc:	2f00      	cmp	r7, #0
 80018be:	f000 80d2 	beq.w	8001a66 <_printf_i+0x1c6>
 80018c2:	2f58      	cmp	r7, #88	@ 0x58
 80018c4:	f000 80b9 	beq.w	8001a3a <_printf_i+0x19a>
 80018c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80018d0:	e03a      	b.n	8001948 <_printf_i+0xa8>
 80018d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80018d6:	2b15      	cmp	r3, #21
 80018d8:	d8f6      	bhi.n	80018c8 <_printf_i+0x28>
 80018da:	a101      	add	r1, pc, #4	@ (adr r1, 80018e0 <_printf_i+0x40>)
 80018dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018e0:	08001939 	.word	0x08001939
 80018e4:	0800194d 	.word	0x0800194d
 80018e8:	080018c9 	.word	0x080018c9
 80018ec:	080018c9 	.word	0x080018c9
 80018f0:	080018c9 	.word	0x080018c9
 80018f4:	080018c9 	.word	0x080018c9
 80018f8:	0800194d 	.word	0x0800194d
 80018fc:	080018c9 	.word	0x080018c9
 8001900:	080018c9 	.word	0x080018c9
 8001904:	080018c9 	.word	0x080018c9
 8001908:	080018c9 	.word	0x080018c9
 800190c:	08001a4d 	.word	0x08001a4d
 8001910:	08001977 	.word	0x08001977
 8001914:	08001a07 	.word	0x08001a07
 8001918:	080018c9 	.word	0x080018c9
 800191c:	080018c9 	.word	0x080018c9
 8001920:	08001a6f 	.word	0x08001a6f
 8001924:	080018c9 	.word	0x080018c9
 8001928:	08001977 	.word	0x08001977
 800192c:	080018c9 	.word	0x080018c9
 8001930:	080018c9 	.word	0x080018c9
 8001934:	08001a0f 	.word	0x08001a0f
 8001938:	6833      	ldr	r3, [r6, #0]
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6032      	str	r2, [r6, #0]
 8001940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001948:	2301      	movs	r3, #1
 800194a:	e09d      	b.n	8001a88 <_printf_i+0x1e8>
 800194c:	6833      	ldr	r3, [r6, #0]
 800194e:	6820      	ldr	r0, [r4, #0]
 8001950:	1d19      	adds	r1, r3, #4
 8001952:	6031      	str	r1, [r6, #0]
 8001954:	0606      	lsls	r6, r0, #24
 8001956:	d501      	bpl.n	800195c <_printf_i+0xbc>
 8001958:	681d      	ldr	r5, [r3, #0]
 800195a:	e003      	b.n	8001964 <_printf_i+0xc4>
 800195c:	0645      	lsls	r5, r0, #25
 800195e:	d5fb      	bpl.n	8001958 <_printf_i+0xb8>
 8001960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001964:	2d00      	cmp	r5, #0
 8001966:	da03      	bge.n	8001970 <_printf_i+0xd0>
 8001968:	232d      	movs	r3, #45	@ 0x2d
 800196a:	426d      	negs	r5, r5
 800196c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001970:	4859      	ldr	r0, [pc, #356]	@ (8001ad8 <_printf_i+0x238>)
 8001972:	230a      	movs	r3, #10
 8001974:	e011      	b.n	800199a <_printf_i+0xfa>
 8001976:	6821      	ldr	r1, [r4, #0]
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	0608      	lsls	r0, r1, #24
 800197c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001980:	d402      	bmi.n	8001988 <_printf_i+0xe8>
 8001982:	0649      	lsls	r1, r1, #25
 8001984:	bf48      	it	mi
 8001986:	b2ad      	uxthmi	r5, r5
 8001988:	2f6f      	cmp	r7, #111	@ 0x6f
 800198a:	4853      	ldr	r0, [pc, #332]	@ (8001ad8 <_printf_i+0x238>)
 800198c:	6033      	str	r3, [r6, #0]
 800198e:	bf14      	ite	ne
 8001990:	230a      	movne	r3, #10
 8001992:	2308      	moveq	r3, #8
 8001994:	2100      	movs	r1, #0
 8001996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800199a:	6866      	ldr	r6, [r4, #4]
 800199c:	60a6      	str	r6, [r4, #8]
 800199e:	2e00      	cmp	r6, #0
 80019a0:	bfa2      	ittt	ge
 80019a2:	6821      	ldrge	r1, [r4, #0]
 80019a4:	f021 0104 	bicge.w	r1, r1, #4
 80019a8:	6021      	strge	r1, [r4, #0]
 80019aa:	b90d      	cbnz	r5, 80019b0 <_printf_i+0x110>
 80019ac:	2e00      	cmp	r6, #0
 80019ae:	d04b      	beq.n	8001a48 <_printf_i+0x1a8>
 80019b0:	4616      	mov	r6, r2
 80019b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80019b6:	fb03 5711 	mls	r7, r3, r1, r5
 80019ba:	5dc7      	ldrb	r7, [r0, r7]
 80019bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80019c0:	462f      	mov	r7, r5
 80019c2:	42bb      	cmp	r3, r7
 80019c4:	460d      	mov	r5, r1
 80019c6:	d9f4      	bls.n	80019b2 <_printf_i+0x112>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d10b      	bne.n	80019e4 <_printf_i+0x144>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	07df      	lsls	r7, r3, #31
 80019d0:	d508      	bpl.n	80019e4 <_printf_i+0x144>
 80019d2:	6923      	ldr	r3, [r4, #16]
 80019d4:	6861      	ldr	r1, [r4, #4]
 80019d6:	4299      	cmp	r1, r3
 80019d8:	bfde      	ittt	le
 80019da:	2330      	movle	r3, #48	@ 0x30
 80019dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80019e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80019e4:	1b92      	subs	r2, r2, r6
 80019e6:	6122      	str	r2, [r4, #16]
 80019e8:	f8cd a000 	str.w	sl, [sp]
 80019ec:	464b      	mov	r3, r9
 80019ee:	aa03      	add	r2, sp, #12
 80019f0:	4621      	mov	r1, r4
 80019f2:	4640      	mov	r0, r8
 80019f4:	f7ff fee6 	bl	80017c4 <_printf_common>
 80019f8:	3001      	adds	r0, #1
 80019fa:	d14a      	bne.n	8001a92 <_printf_i+0x1f2>
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	b004      	add	sp, #16
 8001a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	4833      	ldr	r0, [pc, #204]	@ (8001adc <_printf_i+0x23c>)
 8001a10:	2778      	movs	r7, #120	@ 0x78
 8001a12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	6831      	ldr	r1, [r6, #0]
 8001a1a:	061f      	lsls	r7, r3, #24
 8001a1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a20:	d402      	bmi.n	8001a28 <_printf_i+0x188>
 8001a22:	065f      	lsls	r7, r3, #25
 8001a24:	bf48      	it	mi
 8001a26:	b2ad      	uxthmi	r5, r5
 8001a28:	6031      	str	r1, [r6, #0]
 8001a2a:	07d9      	lsls	r1, r3, #31
 8001a2c:	bf44      	itt	mi
 8001a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8001a32:	6023      	strmi	r3, [r4, #0]
 8001a34:	b11d      	cbz	r5, 8001a3e <_printf_i+0x19e>
 8001a36:	2310      	movs	r3, #16
 8001a38:	e7ac      	b.n	8001994 <_printf_i+0xf4>
 8001a3a:	4827      	ldr	r0, [pc, #156]	@ (8001ad8 <_printf_i+0x238>)
 8001a3c:	e7e9      	b.n	8001a12 <_printf_i+0x172>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	f023 0320 	bic.w	r3, r3, #32
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	e7f6      	b.n	8001a36 <_printf_i+0x196>
 8001a48:	4616      	mov	r6, r2
 8001a4a:	e7bd      	b.n	80019c8 <_printf_i+0x128>
 8001a4c:	6833      	ldr	r3, [r6, #0]
 8001a4e:	6825      	ldr	r5, [r4, #0]
 8001a50:	6961      	ldr	r1, [r4, #20]
 8001a52:	1d18      	adds	r0, r3, #4
 8001a54:	6030      	str	r0, [r6, #0]
 8001a56:	062e      	lsls	r6, r5, #24
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	d501      	bpl.n	8001a60 <_printf_i+0x1c0>
 8001a5c:	6019      	str	r1, [r3, #0]
 8001a5e:	e002      	b.n	8001a66 <_printf_i+0x1c6>
 8001a60:	0668      	lsls	r0, r5, #25
 8001a62:	d5fb      	bpl.n	8001a5c <_printf_i+0x1bc>
 8001a64:	8019      	strh	r1, [r3, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	6123      	str	r3, [r4, #16]
 8001a6a:	4616      	mov	r6, r2
 8001a6c:	e7bc      	b.n	80019e8 <_printf_i+0x148>
 8001a6e:	6833      	ldr	r3, [r6, #0]
 8001a70:	1d1a      	adds	r2, r3, #4
 8001a72:	6032      	str	r2, [r6, #0]
 8001a74:	681e      	ldr	r6, [r3, #0]
 8001a76:	6862      	ldr	r2, [r4, #4]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7fe fbc8 	bl	8000210 <memchr>
 8001a80:	b108      	cbz	r0, 8001a86 <_printf_i+0x1e6>
 8001a82:	1b80      	subs	r0, r0, r6
 8001a84:	6060      	str	r0, [r4, #4]
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	6123      	str	r3, [r4, #16]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a90:	e7aa      	b.n	80019e8 <_printf_i+0x148>
 8001a92:	6923      	ldr	r3, [r4, #16]
 8001a94:	4632      	mov	r2, r6
 8001a96:	4649      	mov	r1, r9
 8001a98:	4640      	mov	r0, r8
 8001a9a:	47d0      	blx	sl
 8001a9c:	3001      	adds	r0, #1
 8001a9e:	d0ad      	beq.n	80019fc <_printf_i+0x15c>
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	079b      	lsls	r3, r3, #30
 8001aa4:	d413      	bmi.n	8001ace <_printf_i+0x22e>
 8001aa6:	68e0      	ldr	r0, [r4, #12]
 8001aa8:	9b03      	ldr	r3, [sp, #12]
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	bfb8      	it	lt
 8001aae:	4618      	movlt	r0, r3
 8001ab0:	e7a6      	b.n	8001a00 <_printf_i+0x160>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	4640      	mov	r0, r8
 8001aba:	47d0      	blx	sl
 8001abc:	3001      	adds	r0, #1
 8001abe:	d09d      	beq.n	80019fc <_printf_i+0x15c>
 8001ac0:	3501      	adds	r5, #1
 8001ac2:	68e3      	ldr	r3, [r4, #12]
 8001ac4:	9903      	ldr	r1, [sp, #12]
 8001ac6:	1a5b      	subs	r3, r3, r1
 8001ac8:	42ab      	cmp	r3, r5
 8001aca:	dcf2      	bgt.n	8001ab2 <_printf_i+0x212>
 8001acc:	e7eb      	b.n	8001aa6 <_printf_i+0x206>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	f104 0619 	add.w	r6, r4, #25
 8001ad4:	e7f5      	b.n	8001ac2 <_printf_i+0x222>
 8001ad6:	bf00      	nop
 8001ad8:	08001e07 	.word	0x08001e07
 8001adc:	08001e18 	.word	0x08001e18

08001ae0 <__sflush_r>:
 8001ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae8:	0716      	lsls	r6, r2, #28
 8001aea:	4605      	mov	r5, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	d454      	bmi.n	8001b9a <__sflush_r+0xba>
 8001af0:	684b      	ldr	r3, [r1, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dc02      	bgt.n	8001afc <__sflush_r+0x1c>
 8001af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	dd48      	ble.n	8001b8e <__sflush_r+0xae>
 8001afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001afe:	2e00      	cmp	r6, #0
 8001b00:	d045      	beq.n	8001b8e <__sflush_r+0xae>
 8001b02:	2300      	movs	r3, #0
 8001b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b08:	682f      	ldr	r7, [r5, #0]
 8001b0a:	6a21      	ldr	r1, [r4, #32]
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	d030      	beq.n	8001b72 <__sflush_r+0x92>
 8001b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	0759      	lsls	r1, r3, #29
 8001b16:	d505      	bpl.n	8001b24 <__sflush_r+0x44>
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001b1e:	b10b      	cbz	r3, 8001b24 <__sflush_r+0x44>
 8001b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b28:	6a21      	ldr	r1, [r4, #32]
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	47b0      	blx	r6
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	89a3      	ldrh	r3, [r4, #12]
 8001b32:	d106      	bne.n	8001b42 <__sflush_r+0x62>
 8001b34:	6829      	ldr	r1, [r5, #0]
 8001b36:	291d      	cmp	r1, #29
 8001b38:	d82b      	bhi.n	8001b92 <__sflush_r+0xb2>
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <__sflush_r+0x104>)
 8001b3c:	410a      	asrs	r2, r1
 8001b3e:	07d6      	lsls	r6, r2, #31
 8001b40:	d427      	bmi.n	8001b92 <__sflush_r+0xb2>
 8001b42:	2200      	movs	r2, #0
 8001b44:	6062      	str	r2, [r4, #4]
 8001b46:	04d9      	lsls	r1, r3, #19
 8001b48:	6922      	ldr	r2, [r4, #16]
 8001b4a:	6022      	str	r2, [r4, #0]
 8001b4c:	d504      	bpl.n	8001b58 <__sflush_r+0x78>
 8001b4e:	1c42      	adds	r2, r0, #1
 8001b50:	d101      	bne.n	8001b56 <__sflush_r+0x76>
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	b903      	cbnz	r3, 8001b58 <__sflush_r+0x78>
 8001b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b5a:	602f      	str	r7, [r5, #0]
 8001b5c:	b1b9      	cbz	r1, 8001b8e <__sflush_r+0xae>
 8001b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b62:	4299      	cmp	r1, r3
 8001b64:	d002      	beq.n	8001b6c <__sflush_r+0x8c>
 8001b66:	4628      	mov	r0, r5
 8001b68:	f7ff fbf2 	bl	8001350 <_free_r>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b70:	e00d      	b.n	8001b8e <__sflush_r+0xae>
 8001b72:	2301      	movs	r3, #1
 8001b74:	4628      	mov	r0, r5
 8001b76:	47b0      	blx	r6
 8001b78:	4602      	mov	r2, r0
 8001b7a:	1c50      	adds	r0, r2, #1
 8001b7c:	d1c9      	bne.n	8001b12 <__sflush_r+0x32>
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0c6      	beq.n	8001b12 <__sflush_r+0x32>
 8001b84:	2b1d      	cmp	r3, #29
 8001b86:	d001      	beq.n	8001b8c <__sflush_r+0xac>
 8001b88:	2b16      	cmp	r3, #22
 8001b8a:	d11e      	bne.n	8001bca <__sflush_r+0xea>
 8001b8c:	602f      	str	r7, [r5, #0]
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e022      	b.n	8001bd8 <__sflush_r+0xf8>
 8001b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	e01b      	b.n	8001bd2 <__sflush_r+0xf2>
 8001b9a:	690f      	ldr	r7, [r1, #16]
 8001b9c:	2f00      	cmp	r7, #0
 8001b9e:	d0f6      	beq.n	8001b8e <__sflush_r+0xae>
 8001ba0:	0793      	lsls	r3, r2, #30
 8001ba2:	680e      	ldr	r6, [r1, #0]
 8001ba4:	bf08      	it	eq
 8001ba6:	694b      	ldreq	r3, [r1, #20]
 8001ba8:	600f      	str	r7, [r1, #0]
 8001baa:	bf18      	it	ne
 8001bac:	2300      	movne	r3, #0
 8001bae:	eba6 0807 	sub.w	r8, r6, r7
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	f1b8 0f00 	cmp.w	r8, #0
 8001bb8:	dde9      	ble.n	8001b8e <__sflush_r+0xae>
 8001bba:	6a21      	ldr	r1, [r4, #32]
 8001bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001bbe:	4643      	mov	r3, r8
 8001bc0:	463a      	mov	r2, r7
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	47b0      	blx	r6
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	dc08      	bgt.n	8001bdc <__sflush_r+0xfc>
 8001bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd2:	81a3      	strh	r3, [r4, #12]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bdc:	4407      	add	r7, r0
 8001bde:	eba8 0800 	sub.w	r8, r8, r0
 8001be2:	e7e7      	b.n	8001bb4 <__sflush_r+0xd4>
 8001be4:	dfbffffe 	.word	0xdfbffffe

08001be8 <_fflush_r>:
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	690b      	ldr	r3, [r1, #16]
 8001bec:	4605      	mov	r5, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	b913      	cbnz	r3, 8001bf8 <_fflush_r+0x10>
 8001bf2:	2500      	movs	r5, #0
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
 8001bf8:	b118      	cbz	r0, 8001c02 <_fflush_r+0x1a>
 8001bfa:	6a03      	ldr	r3, [r0, #32]
 8001bfc:	b90b      	cbnz	r3, 8001c02 <_fflush_r+0x1a>
 8001bfe:	f7ff f9ad 	bl	8000f5c <__sinit>
 8001c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f3      	beq.n	8001bf2 <_fflush_r+0xa>
 8001c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c0c:	07d0      	lsls	r0, r2, #31
 8001c0e:	d404      	bmi.n	8001c1a <_fflush_r+0x32>
 8001c10:	0599      	lsls	r1, r3, #22
 8001c12:	d402      	bmi.n	8001c1a <_fflush_r+0x32>
 8001c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c16:	f7ff fb98 	bl	800134a <__retarget_lock_acquire_recursive>
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	f7ff ff5f 	bl	8001ae0 <__sflush_r>
 8001c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c24:	07da      	lsls	r2, r3, #31
 8001c26:	4605      	mov	r5, r0
 8001c28:	d4e4      	bmi.n	8001bf4 <_fflush_r+0xc>
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	059b      	lsls	r3, r3, #22
 8001c2e:	d4e1      	bmi.n	8001bf4 <_fflush_r+0xc>
 8001c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c32:	f7ff fb8b 	bl	800134c <__retarget_lock_release_recursive>
 8001c36:	e7dd      	b.n	8001bf4 <_fflush_r+0xc>

08001c38 <__swhatbuf_r>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c40:	2900      	cmp	r1, #0
 8001c42:	b096      	sub	sp, #88	@ 0x58
 8001c44:	4615      	mov	r5, r2
 8001c46:	461e      	mov	r6, r3
 8001c48:	da0d      	bge.n	8001c66 <__swhatbuf_r+0x2e>
 8001c4a:	89a3      	ldrh	r3, [r4, #12]
 8001c4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2340      	movne	r3, #64	@ 0x40
 8001c58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	6031      	str	r1, [r6, #0]
 8001c60:	602b      	str	r3, [r5, #0]
 8001c62:	b016      	add	sp, #88	@ 0x58
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	466a      	mov	r2, sp
 8001c68:	f000 f848 	bl	8001cfc <_fstat_r>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	dbec      	blt.n	8001c4a <__swhatbuf_r+0x12>
 8001c70:	9901      	ldr	r1, [sp, #4]
 8001c72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c7a:	4259      	negs	r1, r3
 8001c7c:	4159      	adcs	r1, r3
 8001c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c82:	e7eb      	b.n	8001c5c <__swhatbuf_r+0x24>

08001c84 <__smakebuf_r>:
 8001c84:	898b      	ldrh	r3, [r1, #12]
 8001c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c88:	079d      	lsls	r5, r3, #30
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	d507      	bpl.n	8001ca0 <__smakebuf_r+0x1c>
 8001c90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	6123      	str	r3, [r4, #16]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	6163      	str	r3, [r4, #20]
 8001c9c:	b003      	add	sp, #12
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	ab01      	add	r3, sp, #4
 8001ca2:	466a      	mov	r2, sp
 8001ca4:	f7ff ffc8 	bl	8001c38 <__swhatbuf_r>
 8001ca8:	9f00      	ldr	r7, [sp, #0]
 8001caa:	4605      	mov	r5, r0
 8001cac:	4639      	mov	r1, r7
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f7ff fbba 	bl	8001428 <_malloc_r>
 8001cb4:	b948      	cbnz	r0, 8001cca <__smakebuf_r+0x46>
 8001cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cba:	059a      	lsls	r2, r3, #22
 8001cbc:	d4ee      	bmi.n	8001c9c <__smakebuf_r+0x18>
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	e7e2      	b.n	8001c90 <__smakebuf_r+0xc>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	6020      	str	r0, [r4, #0]
 8001cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd2:	81a3      	strh	r3, [r4, #12]
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cda:	b15b      	cbz	r3, 8001cf4 <__smakebuf_r+0x70>
 8001cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f000 f81d 	bl	8001d20 <_isatty_r>
 8001ce6:	b128      	cbz	r0, 8001cf4 <__smakebuf_r+0x70>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	431d      	orrs	r5, r3
 8001cf8:	81a5      	strh	r5, [r4, #12]
 8001cfa:	e7cf      	b.n	8001c9c <__smakebuf_r+0x18>

08001cfc <_fstat_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4d07      	ldr	r5, [pc, #28]	@ (8001d1c <_fstat_r+0x20>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	602b      	str	r3, [r5, #0]
 8001d0a:	f7ff f812 	bl	8000d32 <_fstat>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	d102      	bne.n	8001d18 <_fstat_r+0x1c>
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	b103      	cbz	r3, 8001d18 <_fstat_r+0x1c>
 8001d16:	6023      	str	r3, [r4, #0]
 8001d18:	bd38      	pop	{r3, r4, r5, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001b8 	.word	0x200001b8

08001d20 <_isatty_r>:
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4d06      	ldr	r5, [pc, #24]	@ (8001d3c <_isatty_r+0x1c>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	f7ff f811 	bl	8000d52 <_isatty>
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	d102      	bne.n	8001d3a <_isatty_r+0x1a>
 8001d34:	682b      	ldr	r3, [r5, #0]
 8001d36:	b103      	cbz	r3, 8001d3a <_isatty_r+0x1a>
 8001d38:	6023      	str	r3, [r4, #0]
 8001d3a:	bd38      	pop	{r3, r4, r5, pc}
 8001d3c:	200001b8 	.word	0x200001b8

08001d40 <_sbrk_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4d06      	ldr	r5, [pc, #24]	@ (8001d5c <_sbrk_r+0x1c>)
 8001d44:	2300      	movs	r3, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	602b      	str	r3, [r5, #0]
 8001d4c:	f7ff f81a 	bl	8000d84 <_sbrk>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_sbrk_r+0x1a>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_sbrk_r+0x1a>
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	200001b8 	.word	0x200001b8

08001d60 <_init>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	bf00      	nop
 8001d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d66:	bc08      	pop	{r3}
 8001d68:	469e      	mov	lr, r3
 8001d6a:	4770      	bx	lr

08001d6c <_fini>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	bf00      	nop
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr
